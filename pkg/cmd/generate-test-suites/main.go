package main

import __antithesis_instrumentation__ "antithesis.com/instrumentation/wrappers"

import (
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"sort"
	"strings"

	"github.com/alessio/shellescape"
)

func main() {
	__antithesis_instrumentation__.Notify(40551)

	infos, err := ioutil.ReadDir("pkg")
	if err != nil {
		__antithesis_instrumentation__.Notify(40557)
		panic(err)
	} else {
		__antithesis_instrumentation__.Notify(40558)
	}
	__antithesis_instrumentation__.Notify(40552)
	var packagesToQuery []string
	for _, info := range infos {
		__antithesis_instrumentation__.Notify(40559)

		if !info.IsDir() || func() bool {
			__antithesis_instrumentation__.Notify(40561)
			return info.Name() == "ui" == true
		}() == true {
			__antithesis_instrumentation__.Notify(40562)
			continue
		} else {
			__antithesis_instrumentation__.Notify(40563)
		}
		__antithesis_instrumentation__.Notify(40560)
		packagesToQuery = append(packagesToQuery, fmt.Sprintf("//pkg/%s/...", info.Name()))
	}
	__antithesis_instrumentation__.Notify(40553)
	allPackages := strings.Join(packagesToQuery, "+")
	queryArgs := []string{"query", fmt.Sprintf("kind(go_test, %s)", allPackages), "--output=label"}
	buf, err := exec.Command("bazel", queryArgs...).Output()
	if err != nil {
		__antithesis_instrumentation__.Notify(40564)
		log.Printf("Could not query Bazel tests: got error %v", err)
		var cmderr *exec.ExitError
		if errors.As(err, &cmderr) {
			__antithesis_instrumentation__.Notify(40566)
			log.Printf("Got error output: %s", string(cmderr.Stderr))
		} else {
			__antithesis_instrumentation__.Notify(40567)
			log.Printf("Run `bazel %s` to reproduce the failure", shellescape.QuoteCommand(queryArgs))
		}
		__antithesis_instrumentation__.Notify(40565)
		os.Exit(1)
	} else {
		__antithesis_instrumentation__.Notify(40568)
	}
	__antithesis_instrumentation__.Notify(40554)
	labels := strings.Split(string(buf[:]), "\n")
	sort.Slice(labels, func(i, j int) bool { __antithesis_instrumentation__.Notify(40569); return labels[i] < labels[j] })
	__antithesis_instrumentation__.Notify(40555)

	fmt.Println(`# Code generated by generate-test-suites, DO NOT EDIT.
# gazelle:proto_strip_import_prefix /pkg

ALL_TESTS = [`)
	for _, label := range labels {
		__antithesis_instrumentation__.Notify(40570)
		if len(label) > 0 {
			__antithesis_instrumentation__.Notify(40571)
			fmt.Printf("    %q,\n", label)
		} else {
			__antithesis_instrumentation__.Notify(40572)
		}
	}
	__antithesis_instrumentation__.Notify(40556)
	fmt.Println(`]

# These suites run only the tests with the appropriate "size" (excepting those
# tagged "broken_in_bazel", "flaky", or "integration") [1]. Note that tests have
# a default timeout depending on the size [2].

# [1] https://docs.bazel.build/versions/master/be/general.html#test_suite
# [2] https://docs.bazel.build/versions/master/be/common-definitions.html#common-attributes-tests`)

	for _, size := range []string{"small", "medium", "large", "enormous"} {
		__antithesis_instrumentation__.Notify(40573)
		fmt.Printf(`
test_suite(
    name = "%[1]s_tests",
    tags = [
        "-broken_in_bazel",
        "-flaky",
        "-integration",
        "%[1]s",
    ],
    tests = ALL_TESTS,
)
`, size)
	}
}
