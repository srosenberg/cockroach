package schemaexpr

import __antithesis_instrumentation__ "antithesis.com/instrumentation/wrappers"

import (
	"context"
	"fmt"

	"github.com/cockroachdb/cockroach/pkg/sql/catalog"
	"github.com/cockroachdb/cockroach/pkg/sql/catalog/colinfo"
	"github.com/cockroachdb/cockroach/pkg/sql/parser"
	"github.com/cockroachdb/cockroach/pkg/sql/pgwire/pgcode"
	"github.com/cockroachdb/cockroach/pkg/sql/pgwire/pgerror"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/catid"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/sessiondata"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

func DequalifyColumnRefs(
	ctx context.Context, source *colinfo.DataSourceInfo, expr tree.Expr,
) (string, error) {
	__antithesis_instrumentation__.Notify(267809)
	e, err := dequalifyColumnRefs(ctx, source, expr)
	if err != nil {
		__antithesis_instrumentation__.Notify(267811)
		return "", err
	} else {
		__antithesis_instrumentation__.Notify(267812)
	}
	__antithesis_instrumentation__.Notify(267810)
	return tree.Serialize(e), nil
}

func dequalifyColumnRefs(
	ctx context.Context, source *colinfo.DataSourceInfo, expr tree.Expr,
) (tree.Expr, error) {
	__antithesis_instrumentation__.Notify(267813)
	resolver := colinfo.ColumnResolver{Source: source}
	return tree.SimpleVisit(
		expr,
		func(expr tree.Expr) (recurse bool, newExpr tree.Expr, err error) {
			__antithesis_instrumentation__.Notify(267814)
			if vBase, ok := expr.(tree.VarName); ok {
				__antithesis_instrumentation__.Notify(267816)
				v, err := vBase.NormalizeVarName()
				if err != nil {
					__antithesis_instrumentation__.Notify(267818)
					return false, nil, err
				} else {
					__antithesis_instrumentation__.Notify(267819)
				}
				__antithesis_instrumentation__.Notify(267817)
				if c, ok := v.(*tree.ColumnItem); ok {
					__antithesis_instrumentation__.Notify(267820)
					_, err := colinfo.ResolveColumnItem(ctx, &resolver, c)
					if err != nil {
						__antithesis_instrumentation__.Notify(267822)
						return false, nil, err
					} else {
						__antithesis_instrumentation__.Notify(267823)
					}
					__antithesis_instrumentation__.Notify(267821)
					colIdx := resolver.ResolverState.ColIdx
					col := source.SourceColumns[colIdx]
					return false, &tree.ColumnItem{ColumnName: tree.Name(col.Name)}, nil
				} else {
					__antithesis_instrumentation__.Notify(267824)
				}
			} else {
				__antithesis_instrumentation__.Notify(267825)
			}
			__antithesis_instrumentation__.Notify(267815)
			return true, expr, err
		},
	)
}

func FormatColumnForDisplay(
	ctx context.Context,
	tbl catalog.TableDescriptor,
	col catalog.Column,
	semaCtx *tree.SemaContext,
	sessionData *sessiondata.SessionData,
) (string, error) {
	__antithesis_instrumentation__.Notify(267826)
	f := tree.NewFmtCtx(tree.FmtSimple)
	name := col.GetName()
	f.FormatNameP(&name)
	f.WriteByte(' ')
	f.WriteString(col.GetType().SQLString())
	if col.IsHidden() {
		__antithesis_instrumentation__.Notify(267832)
		f.WriteString(" NOT VISIBLE")
	} else {
		__antithesis_instrumentation__.Notify(267833)
	}
	__antithesis_instrumentation__.Notify(267827)
	if col.IsNullable() {
		__antithesis_instrumentation__.Notify(267834)
		f.WriteString(" NULL")
	} else {
		__antithesis_instrumentation__.Notify(267835)
		f.WriteString(" NOT NULL")
	}
	__antithesis_instrumentation__.Notify(267828)
	if col.HasDefault() {
		__antithesis_instrumentation__.Notify(267836)
		if col.IsGeneratedAsIdentity() {
			__antithesis_instrumentation__.Notify(267837)
			if col.IsGeneratedAlwaysAsIdentity() {
				__antithesis_instrumentation__.Notify(267839)
				f.WriteString(" GENERATED ALWAYS AS IDENTITY")
			} else {
				__antithesis_instrumentation__.Notify(267840)
				if col.IsGeneratedByDefaultAsIdentity() {
					__antithesis_instrumentation__.Notify(267841)
					f.WriteString(" GENERATED BY DEFAULT AS IDENTITY")
				} else {
					__antithesis_instrumentation__.Notify(267842)
				}
			}
			__antithesis_instrumentation__.Notify(267838)
			if col.HasGeneratedAsIdentitySequenceOption() {
				__antithesis_instrumentation__.Notify(267843)
				seqOpt := col.GetGeneratedAsIdentitySequenceOption()
				s := formatGeneratedAsIdentitySequenceOption(seqOpt)
				f.WriteString(s)
			} else {
				__antithesis_instrumentation__.Notify(267844)
			}

		} else {
			__antithesis_instrumentation__.Notify(267845)
			f.WriteString(" DEFAULT ")
			defExpr, err := FormatExprForDisplay(ctx, tbl, col.GetDefaultExpr(), semaCtx, sessionData, tree.FmtParsable)
			if err != nil {
				__antithesis_instrumentation__.Notify(267847)
				return "", err
			} else {
				__antithesis_instrumentation__.Notify(267848)
			}
			__antithesis_instrumentation__.Notify(267846)
			f.WriteString(defExpr)
		}
	} else {
		__antithesis_instrumentation__.Notify(267849)
	}
	__antithesis_instrumentation__.Notify(267829)
	if col.HasOnUpdate() {
		__antithesis_instrumentation__.Notify(267850)
		f.WriteString(" ON UPDATE ")
		onUpdateExpr, err := FormatExprForDisplay(ctx, tbl, col.GetOnUpdateExpr(), semaCtx, sessionData, tree.FmtParsable)
		if err != nil {
			__antithesis_instrumentation__.Notify(267852)
			return "", err
		} else {
			__antithesis_instrumentation__.Notify(267853)
		}
		__antithesis_instrumentation__.Notify(267851)
		f.WriteString(onUpdateExpr)
	} else {
		__antithesis_instrumentation__.Notify(267854)
	}
	__antithesis_instrumentation__.Notify(267830)
	if col.IsComputed() {
		__antithesis_instrumentation__.Notify(267855)
		f.WriteString(" AS (")
		compExpr, err := FormatExprForDisplay(ctx, tbl, col.GetComputeExpr(), semaCtx, sessionData, tree.FmtParsable)
		if err != nil {
			__antithesis_instrumentation__.Notify(267857)
			return "", err
		} else {
			__antithesis_instrumentation__.Notify(267858)
		}
		__antithesis_instrumentation__.Notify(267856)
		f.WriteString(compExpr)
		if col.IsVirtual() {
			__antithesis_instrumentation__.Notify(267859)
			f.WriteString(") VIRTUAL")
		} else {
			__antithesis_instrumentation__.Notify(267860)
			f.WriteString(") STORED")
		}
	} else {
		__antithesis_instrumentation__.Notify(267861)
	}
	__antithesis_instrumentation__.Notify(267831)
	return f.CloseAndGetString(), nil
}

func RenameColumn(expr string, from tree.Name, to tree.Name) (string, error) {
	__antithesis_instrumentation__.Notify(267862)
	parsed, err := parser.ParseExpr(expr)
	if err != nil {
		__antithesis_instrumentation__.Notify(267866)
		return "", err
	} else {
		__antithesis_instrumentation__.Notify(267867)
	}
	__antithesis_instrumentation__.Notify(267863)

	replaceFn := func(expr tree.Expr) (recurse bool, newExpr tree.Expr, err error) {
		__antithesis_instrumentation__.Notify(267868)
		if vBase, ok := expr.(tree.VarName); ok {
			__antithesis_instrumentation__.Notify(267870)
			v, err := vBase.NormalizeVarName()
			if err != nil {
				__antithesis_instrumentation__.Notify(267873)
				return false, nil, err
			} else {
				__antithesis_instrumentation__.Notify(267874)
			}
			__antithesis_instrumentation__.Notify(267871)
			if c, ok := v.(*tree.ColumnItem); ok {
				__antithesis_instrumentation__.Notify(267875)
				if string(c.ColumnName) == string(from) {
					__antithesis_instrumentation__.Notify(267876)
					c.ColumnName = to
				} else {
					__antithesis_instrumentation__.Notify(267877)
				}
			} else {
				__antithesis_instrumentation__.Notify(267878)
			}
			__antithesis_instrumentation__.Notify(267872)
			return false, v, nil
		} else {
			__antithesis_instrumentation__.Notify(267879)
		}
		__antithesis_instrumentation__.Notify(267869)
		return true, expr, nil
	}
	__antithesis_instrumentation__.Notify(267864)

	renamed, err := tree.SimpleVisit(parsed, replaceFn)
	if err != nil {
		__antithesis_instrumentation__.Notify(267880)
		return "", err
	} else {
		__antithesis_instrumentation__.Notify(267881)
	}
	__antithesis_instrumentation__.Notify(267865)

	return renamed.String(), nil
}

func iterColDescriptors(
	desc catalog.TableDescriptor, rootExpr tree.Expr, f func(column catalog.Column) error,
) error {
	__antithesis_instrumentation__.Notify(267882)
	_, err := tree.SimpleVisit(rootExpr, func(expr tree.Expr) (recurse bool, newExpr tree.Expr, err error) {
		__antithesis_instrumentation__.Notify(267884)
		vBase, ok := expr.(tree.VarName)
		if !ok {
			__antithesis_instrumentation__.Notify(267890)

			return true, expr, nil
		} else {
			__antithesis_instrumentation__.Notify(267891)
		}
		__antithesis_instrumentation__.Notify(267885)

		v, err := vBase.NormalizeVarName()
		if err != nil {
			__antithesis_instrumentation__.Notify(267892)
			return false, nil, err
		} else {
			__antithesis_instrumentation__.Notify(267893)
		}
		__antithesis_instrumentation__.Notify(267886)

		c, ok := v.(*tree.ColumnItem)
		if !ok {
			__antithesis_instrumentation__.Notify(267894)
			return true, expr, nil
		} else {
			__antithesis_instrumentation__.Notify(267895)
		}
		__antithesis_instrumentation__.Notify(267887)

		col, err := desc.FindColumnWithName(c.ColumnName)
		if err != nil || func() bool {
			__antithesis_instrumentation__.Notify(267896)
			return col.Dropped() == true
		}() == true {
			__antithesis_instrumentation__.Notify(267897)
			return false, nil, pgerror.Newf(pgcode.UndefinedColumn,
				"column %q does not exist, referenced in %q", c.ColumnName, rootExpr.String())
		} else {
			__antithesis_instrumentation__.Notify(267898)
		}
		__antithesis_instrumentation__.Notify(267888)

		if err := f(col); err != nil {
			__antithesis_instrumentation__.Notify(267899)
			return false, nil, err
		} else {
			__antithesis_instrumentation__.Notify(267900)
		}
		__antithesis_instrumentation__.Notify(267889)
		return false, expr, err
	})
	__antithesis_instrumentation__.Notify(267883)

	return err
}

type dummyColumn struct {
	typ  *types.T
	name tree.Name
}

func (d *dummyColumn) String() string {
	__antithesis_instrumentation__.Notify(267901)
	return tree.AsString(d)
}

func (d *dummyColumn) Format(ctx *tree.FmtCtx) {
	__antithesis_instrumentation__.Notify(267902)
	d.name.Format(ctx)
}

func (d *dummyColumn) Walk(_ tree.Visitor) tree.Expr {
	__antithesis_instrumentation__.Notify(267903)
	return d
}

func (d *dummyColumn) TypeCheck(
	_ context.Context, _ *tree.SemaContext, desired *types.T,
) (tree.TypedExpr, error) {
	__antithesis_instrumentation__.Notify(267904)
	return d, nil
}

func (*dummyColumn) Eval(_ *tree.EvalContext) (tree.Datum, error) {
	__antithesis_instrumentation__.Notify(267905)
	panic("dummyColumnItem.Eval() is undefined")
}

func (d *dummyColumn) ResolvedType() *types.T {
	__antithesis_instrumentation__.Notify(267906)
	return d.typ
}

func ReplaceColumnVars(
	rootExpr tree.Expr,
	columnLookupFn func(columnName tree.Name) (exists bool, accessible bool, id catid.ColumnID, typ *types.T),
) (tree.Expr, catalog.TableColSet, error) {
	__antithesis_instrumentation__.Notify(267907)
	var colIDs catalog.TableColSet

	newExpr, err := tree.SimpleVisit(rootExpr, func(expr tree.Expr) (recurse bool, newExpr tree.Expr, err error) {
		__antithesis_instrumentation__.Notify(267909)
		vBase, ok := expr.(tree.VarName)
		if !ok {
			__antithesis_instrumentation__.Notify(267915)

			return true, expr, nil
		} else {
			__antithesis_instrumentation__.Notify(267916)
		}
		__antithesis_instrumentation__.Notify(267910)

		v, err := vBase.NormalizeVarName()
		if err != nil {
			__antithesis_instrumentation__.Notify(267917)
			return false, nil, err
		} else {
			__antithesis_instrumentation__.Notify(267918)
		}
		__antithesis_instrumentation__.Notify(267911)

		c, ok := v.(*tree.ColumnItem)
		if !ok {
			__antithesis_instrumentation__.Notify(267919)
			return true, expr, nil
		} else {
			__antithesis_instrumentation__.Notify(267920)
		}
		__antithesis_instrumentation__.Notify(267912)

		colExists, colIsAccessible, colID, colType := columnLookupFn(c.ColumnName)
		if !colExists {
			__antithesis_instrumentation__.Notify(267921)
			return false, nil, pgerror.Newf(pgcode.UndefinedColumn,
				"column %q does not exist, referenced in %q", c.ColumnName, rootExpr.String())
		} else {
			__antithesis_instrumentation__.Notify(267922)
		}
		__antithesis_instrumentation__.Notify(267913)
		if !colIsAccessible {
			__antithesis_instrumentation__.Notify(267923)
			return false, nil, pgerror.Newf(pgcode.UndefinedColumn,
				"column %q is inaccessible and cannot be referenced", c.ColumnName)
		} else {
			__antithesis_instrumentation__.Notify(267924)
		}
		__antithesis_instrumentation__.Notify(267914)
		colIDs.Add(colID)

		return false, &dummyColumn{typ: colType, name: c.ColumnName}, nil
	})
	__antithesis_instrumentation__.Notify(267908)

	return newExpr, colIDs, err
}

func replaceColumnVars(
	tbl catalog.TableDescriptor, rootExpr tree.Expr,
) (tree.Expr, catalog.TableColSet, error) {
	__antithesis_instrumentation__.Notify(267925)
	lookupFn := func(columnName tree.Name) (exists bool, accessible bool, id catid.ColumnID, typ *types.T) {
		__antithesis_instrumentation__.Notify(267927)
		col, err := tbl.FindColumnWithName(columnName)
		if err != nil || func() bool {
			__antithesis_instrumentation__.Notify(267929)
			return col.Dropped() == true
		}() == true {
			__antithesis_instrumentation__.Notify(267930)
			return false, false, 0, nil
		} else {
			__antithesis_instrumentation__.Notify(267931)
		}
		__antithesis_instrumentation__.Notify(267928)
		return true, !col.IsInaccessible(), col.GetID(), col.GetType()
	}
	__antithesis_instrumentation__.Notify(267926)
	return ReplaceColumnVars(rootExpr, lookupFn)
}

func ReplaceIDsWithFQNames(
	ctx context.Context, rootExpr tree.Expr, semaCtx *tree.SemaContext,
) (tree.Expr, error) {
	__antithesis_instrumentation__.Notify(267932)
	replaceFn := func(expr tree.Expr) (recurse bool, newExpr tree.Expr, err error) {
		__antithesis_instrumentation__.Notify(267934)
		id, ok := GetSeqIDFromExpr(expr)
		if !ok {
			__antithesis_instrumentation__.Notify(267938)
			return true, expr, nil
		} else {
			__antithesis_instrumentation__.Notify(267939)
		}
		__antithesis_instrumentation__.Notify(267935)

		seqName, err := semaCtx.TableNameResolver.GetQualifiedTableNameByID(ctx, id, tree.ResolveRequireSequenceDesc)
		if err != nil {
			__antithesis_instrumentation__.Notify(267940)
			return true, expr, nil
		} else {
			__antithesis_instrumentation__.Notify(267941)
		}
		__antithesis_instrumentation__.Notify(267936)

		currDb := semaCtx.TableNameResolver.CurrentDatabase()
		if seqName.Catalog() == currDb {
			__antithesis_instrumentation__.Notify(267942)
			seqName.CatalogName = ""
			seqName.ExplicitCatalog = false
		} else {
			__antithesis_instrumentation__.Notify(267943)
		}
		__antithesis_instrumentation__.Notify(267937)

		return false, &tree.CastExpr{
			Type:       types.RegClass,
			SyntaxMode: tree.CastShort,
			Expr:       tree.NewStrVal(seqName.String()),
		}, nil
	}
	__antithesis_instrumentation__.Notify(267933)

	newExpr, err := tree.SimpleVisit(rootExpr, replaceFn)
	return newExpr, err
}

func GetSeqIDFromExpr(expr tree.Expr) (int64, bool) {
	__antithesis_instrumentation__.Notify(267944)

	switch n := expr.(type) {
	case *tree.AnnotateTypeExpr:
		__antithesis_instrumentation__.Notify(267945)
		if typ, safe := tree.GetStaticallyKnownType(n.Type); !safe || func() bool {
			__antithesis_instrumentation__.Notify(267951)
			return typ.Family() != types.OidFamily == true
		}() == true {
			__antithesis_instrumentation__.Notify(267952)
			return 0, false
		} else {
			__antithesis_instrumentation__.Notify(267953)
		}
		__antithesis_instrumentation__.Notify(267946)
		numVal, ok := n.Expr.(*tree.NumVal)
		if !ok {
			__antithesis_instrumentation__.Notify(267954)
			return 0, false
		} else {
			__antithesis_instrumentation__.Notify(267955)
		}
		__antithesis_instrumentation__.Notify(267947)
		id, err := numVal.AsInt64()
		if err != nil {
			__antithesis_instrumentation__.Notify(267956)
			return 0, false
		} else {
			__antithesis_instrumentation__.Notify(267957)
		}
		__antithesis_instrumentation__.Notify(267948)
		return id, true
	case *tree.DOid:
		__antithesis_instrumentation__.Notify(267949)
		return int64(n.DInt), true
	default:
		__antithesis_instrumentation__.Notify(267950)
		return 0, false
	}
}

func formatGeneratedAsIdentitySequenceOption(seqOpt string) string {
	__antithesis_instrumentation__.Notify(267958)
	if seqOpt == "" {
		__antithesis_instrumentation__.Notify(267960)
		return ""
	} else {
		__antithesis_instrumentation__.Notify(267961)
	}
	__antithesis_instrumentation__.Notify(267959)
	return fmt.Sprintf(" (%s)", seqOpt)
}
